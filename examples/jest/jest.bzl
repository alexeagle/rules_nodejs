"Shows how you might create a macro for the autogeneratd Jest rule"

load("@npm//jest-cli:index.bzl", _jest_test = "jest_test")
load("@npm_bazel_typescript//:index.bzl", "ts_library")

def jest_test(name, srcs, deps, jest_config, **kwargs):
    "A macro around the autogenerated jest_test rule"
    templated_args = [
        "--no-cache",
        "--no-watchman",
        "--ci",
    ]
    templated_args.extend(["--config", "$(rootpath %s)" % jest_config])
    for src in srcs:
        templated_args.extend(["--runTestsByPath", "$(rootpath %s)" % src])

    _jest_test(
        name = name,
        data = [jest_config] + srcs + deps,
        templated_args = templated_args,
        **kwargs
    )

def ts_jest_test(name, srcs, jest_config, deps = [], data = [], **kwargs):
    "A macro around the autogenerated jest_test rule"

    ts_library(
        name = "%s_ts" % name,
        srcs = srcs,
        data = data,
        deps = deps + ["@npm//@types/jest"],
    )
    native.filegroup(
        name = "%s_es5" % name,
        srcs = [":%s_ts" % name],
        output_group = "es5_sources",
    )

    args = [
        "--no-cache",
        "--no-watchman",
        "--ci",
    ]
    args.extend(["--config", "$(rootpath %s)" % jest_config])

    for src in srcs:
        args.extend(["--runTestsByPath", "$(rootpath :%s_es5)" % name])

    _jest_test(
        name = name,
        data = [jest_config, ":%s_es5" % name] + deps + data,
        args = args,
        **kwargs
    )
