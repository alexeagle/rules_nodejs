""

def _node_modules(ctx):
    out = ctx.actions.declare_directory("node_modules")
    chdir = ctx.actions.declare_file("_%s.chdir.js" % ctx.label.name)

    # Should we use the user's file if there is one in this directory?
    package_json = ctx.actions.declare_file("package.json")

    ctx.actions.write(chdir, "process.chdir(__dirname)")
    ctx.actions.write(package_json, json.encode({
        "dependencies": {
            pkg: "file:../../.." + ctx.files.packages[idx].path
            for (idx, pkg) in enumerate([p.label.name for p in ctx.attr.packages])
            #"typescript": "../../../" + ctx.files.packages[0].path,
        },
        "description": "generated by Bazel node_modules rule",
        "name": "bazel-internal-installation",
        "private": True,
    }))

    ctx.actions.run(
        executable = ctx.executable._node,
        arguments = [
            "--require=./" + chdir.path,
            ctx.file._npm.path,
            "install",
            "--no-package-lock",
            "../../../" + ctx.files.packages[0].path,
        ],
        inputs = ctx.files.packages + ctx.files._npm + [chdir, package_json],
        outputs = [out],
        env = {
            "npm_config_audit": "false",
            "npm_config_cache": "../../../" + ctx.files.packages[0].dirname,
            "npm_config_update_notifier": "false",
        },
    )
    return [
        DefaultInfo(
            files = depset([out]),
        ),
    ]

# tRy
# - a package with deps like rollup
# - try using the resulting node_modules as a dep/tool
# - generate a package.json with tarball urls with resolve for transitive deps
# - toolchains?
# - no way to reference files inside the node_modules

node_modules = rule(
    implementation = _node_modules,
    attrs = {
        "packages": attr.label_list(
            mandatory = True,
        ),
        "_node": attr.label(
            executable = True,
            cfg = "target",
            allow_files = True,
            default = Label("@nodejs//:node_bin"),
        ),
        "_npm": attr.label(
            executable = True,
            cfg = "target",
            allow_single_file = True,
            default = Label("@nodejs//:npm_bin"),
        ),
    },
)
