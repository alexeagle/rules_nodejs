/* Copyright 2019 The Bazel Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This package provides a minimal implementation of language.Language for
// rules_nodejs.
package npm

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

var _ = fmt.Printf

type npmlang struct{}

// NewLanguage returns an instace of the Gazelle plugin for rules_nodejs.
func NewLanguage() language.Language {
	return &npmlang{}
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (s *npmlang) Kinds() map[string]rule.KindInfo {
	return map[string]rule.KindInfo{
		// "sass_library": {
		// 	MatchAny: false,
		// 	NonEmptyAttrs: map[string]bool{
		// 		"srcs": true,
		// 	},
		// 	MergeableAttrs: map[string]bool{
		// 		"srcs": true,
		// 	},
		// 	ResolveAttrs: map[string]bool{"deps": true},
		// },
	}
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (s *npmlang) Loads() []rule.LoadInfo {
	return []rule.LoadInfo{
		{
			Name:    "@build_bazel_rules_nodejs//:index.bzl",
			Symbols: []string{"npm_package"},
		},
	}
}

type Package struct {
	name string
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// empty is a list of empty rules that may be deleted after merge.
//
// gen is a list of generated rules that may be updated or added.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (s *npmlang) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	// base is the last part of the path for this element. For example:
	// "hello_world" => "hello_world"
	// "foo/bar" => "bar"
	base := path.Base(args.Rel)
	if base == "." {
		//args.Rel will return an empty string if you're in the root of the repo.
		//This will then be translated into "." by path.Base which is not a valid
		//name for a target. Therefore we will use the name of "root" just to have
		//something that is valid. If the user doesn't want the target to be named
		// `//:root`, then they can rename it and on the next generation it will
		// persist the user supplied name.
		base = "root"
	}

	rules := []*rule.Rule{}
	imports := []interface{}{}

	var normalFiles []string
	for _, f := range append(args.RegularFiles, args.GenFiles...) {
		// Only generate entries for .json files
		if !strings.HasSuffix(f, ".json") {
			continue
		}

		jsonFile, err := os.Open(filepath.Join(args.Dir, f))
		if err != nil {
			panic(fmt.Sprintf("Fatal error"))
		}
		defer jsonFile.Close()

		byteValue, _ := ioutil.ReadAll(jsonFile)

		var pkg Package
		json.Unmarshal(byteValue, &pkg)

		fmt.Println("package name: " + pkg.name)
		// fileInfo, err := jsonFileInfo(args.Dir, f)
		// if err != nil {
		// 	panic(fmt.Sprintf("Fatal error"))
		// }

		// for err := range fileInfo.Errors {
		// 	log.Printf("Error parsing %s: %s\n", fileInfo.Name, err)
		// }

		// imports = append(imports, fileInfo.Imports)

		// // The primary entrypoint on Sass is a main.scss file.
		// if f == "main.scss" {
		// 	rule := rule.NewRule("sass_binary", base)

		// 	rule.SetAttr("src", "main.scss")
		// 	rules = append(rules, rule)
		// } else if strings.HasPrefix(path.Base(f), "_") {
		// 	// Libraries in Sass have filenames that start with _.
		// 	// For each file in the dir with a leading "_" create a new sass_library
		// 	rule := rule.NewRule("sass_library", base[1:len(base)-5])

		// 	rule.SetAttr("srcs", []string{base})
		// 	rule.SetPrivateAttr(config.GazelleImportsKey, fileInfo.Imports)

		// 	// These rules should always be public
		// 	rule.SetAttr("visibility", []string{"//visibility:public"})

		// 	rules = append(rules, rule)
		// } else {
		// 	normalFiles = append(normalFiles, f)
		// }
	}

	if len(normalFiles) > 0 {
		// rule := rule.NewRule("sass_library", base)

		// rule.SetAttr("srcs", normalFiles)

		// rules = append(rules, rule)
	}

	return language.GenerateResult{
		Gen:     rules,
		Imports: imports,
		// Empty is a list of rules that cannot be built with the files found in the
		// directory GenerateRules was asked to process. These will be merged with
		// existing rules. If ther merged rules are empty, they will be deleted.
		// In order to keep the BUILD file clean, if no file is included in the
		// default rule for this directory, then remove it.
		Empty: []*rule.Rule{rule.NewRule("npm_package", base)},
	}
}

// Fix repairs deprecated usage of language-specific rules in f. This is
// called before the file is indexed. Unless c.ShouldFix is true, fixes
// that delete or rename rules should not be performed.
func (s *npmlang) Fix(c *config.Config, f *rule.File) {
}
