load("//packages/typescript:index.bzl", "ts_project")
load("//:index.bzl", "nodejs_binary")
load("//third_party/github.com/bazelbuild/bazel-skylib:rules/copy_file.bzl", "copy_file")
load("//internal/common:copy_to_bin.bzl", "copy_to_bin")

# Copy the proto file to a matching third_party/... nested directory
# so the runtime require() statements still work
_worker_proto_dir = "third_party/github.com/bazelbuild/bazel/src/main/protobuf"

genrule(
    name = "copy_worker_js",
    srcs = ["//packages/worker:npm_package"],
    outs = ["worker.js"],
    cmd = "cp $(execpath //packages/worker:npm_package)/index.js $@",
    visibility = ["//visibility:public"],
)

copy_file(
    name = "copy_worker_proto",
    src = "@build_bazel_rules_typescript//%s:worker_protocol.proto" % _worker_proto_dir,
    out = "%s/worker_protocol.proto" % _worker_proto_dir,
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "worker_adapter",
    srcs = ["worker_adapter.js"],
)

# The ts_project macro should generate this, rather than plop it in user code
nodejs_binary(
    name = "tsc_watch",
    data = [
        "tsconfig.json",
        ":copy_worker_js",
        ":copy_worker_proto",
        ":worker_adapter",
        "//packages/worker",
        "@npm//protobufjs",
        "@npm//typescript",
    ],
    entry_point = "@npm//:node_modules/typescript/bin/tsc",
    templated_args = [
        "--node_options=--require=$$(rlocation $(rootpath :worker_adapter))",
        "--nobazel_patch_module_resolver",
        "--project",
        "$(execpath tsconfig.json)",
        "--outDir",
        # $(RULEDIR) is a shorthand for the dist/bin directory where Bazel requires we write outputs
        # but nodejs_binary doesn't accept it?
        "bazel-out/darwin-fastbuild/bin/%s" % package_name(),
        "--watch",
    ],
)

ts_project(
    declaration = True,
    supports_workers = True,
    tsc = "tsc_watch",
)
